#!/bin/bash

# --- GitHub CLI ---
echo "Installing GitHub CLI..."
sudo pacman -Syu --noconfirm --needed gh

# --- Development Stuff ---
echo "Installing core development tools..."
sudo pacman -S --noconfirm --needed \
    luarocks ruby go python python-pip python-virtualenv \
    docker zsh unixodbc tmux php openjdk-17-jre openjdk-17-jdk \
    tree-sitter perl wget curl git unzip

# Install iredis via pip
echo "Installing iredis..."
pip install iredis

# --- PHP Composer ---
echo "Installing PHP Composer..."
EXPECTED_CHECKSUM="$(php -r 'copy("https://composer.github.io/installer.sig", "php://stdout");')"
php -r "copy('https://getcomposer.org/installer', 'composer-setup.php');"
ACTUAL_CHECKSUM="$(php -r "echo hash_file('sha384', 'composer-setup.php');")"

if [ "$EXPECTED_CHECKSUM" != "$ACTUAL_CHECKSUM" ]
then
    >&2 echo 'ERROR: Invalid installer checksum'
    rm composer-setup.php
    exit 1
fi

php composer-setup.php --install-dir=/usr/local/bin --filename=composer
rm composer-setup.php

# --- NVM (Node Version Manager) ---
echo "Installing NVM..."
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash # Pinned to a recent version

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

echo "Installing LTS Node.js via NVM..."
nvm install --lts
nvm use --lts
nvm alias default 'lts/*' # Set default node version

# --- Tree-sitter CLI (via npm) ---
echo "Installing tree-sitter-cli..."
npm install -g tree-sitter-cli

# --- Docker Group ---
echo "Adding current user to docker group..."
sudo usermod -aG docker $USER
echo "You may need to log out and log back in for docker group changes to take effect."

# --- Deno ---
echo "Installing Deno..."
curl -fsSL https://deno.land/install.sh | sh
export DENO_INSTALL="$HOME/.deno"
export PATH="$DENO_INSTALL/bin:$PATH"

# --- Taskbook (via Deno) ---
echo "Installing Taskbook..."
deno install -g --allow-read --allow-write --allow-env --allow-net npm:taskbook

# --- usql (Universal SQL CLI via Go) ---
echo "Installing usql..."
go install github.com/xo/usql@latest

# --- Oh My Zsh ---
echo "Installing Oh My Zsh..."
CHSH=no RUNZSH=no sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended

ZSH_CUSTOM=${ZSH_CUSTOM:-~/.oh-my-zsh/custom}

echo "Installing Oh My Zsh plugins..."
# Zsh syntax highlighting
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM}/plugins/zsh-syntax-highlighting
# Zsh autosuggestions
git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM}/plugins/zsh-autosuggestions
# Zsh autoswitch virtualenv
git clone "https://github.com/MichaelAquilina/zsh-autoswitch-virtualenv.git" "${ZSH_CUSTOM}/plugins/autoswitch_virtualenv"

echo "Configuring Oh My Zsh plugins in .zshrc..."
sed -i 's/^plugins=(git)$/plugins=(git zsh-syntax-highlighting zsh-autosuggestions autoswitch_virtualenv sudo)/' ~/.zshrc
# If plugins line is different, this sed might need adjustment or manual configuration.

# --- Rust ---
echo "Installing Rust..."
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --no-modify-path
source "$HOME/.cargo/env" # Source Rust env for current session

# --- Tauri Dependencies ---
echo "Installing Tauri dependencies for Arch Linux..."
sudo pacman -S --noconfirm --needed \
    webkit2gtk-4.1 \
    base-devel \
    curl \
    wget \
    file \
    libxdo \
    openssl \
    libappindicator-gtk3 \
    librsvg \
    patchelf # Often needed for AppImages or other bundled apps

# --- Tauri App & CLI ---
echo "Installing create-tauri-app and tauri-cli..."
cargo install create-tauri-app --locked
cargo install tauri-cli --version '^2.0.0-beta' --locked # Using beta as per common Tauri v2 usage

# --- Trunk ---
echo "Installing Trunk..."
cargo install trunk --locked

# --- WASM Target for Rust ---
echo "Adding WASM target for Rust..."
rustup target add wasm32-unknown-unknown

echo "---------------------------------------------------------------------"
echo "Setup script finished."
echo "Please ensure PATHs for Go, Deno, Cargo, NVM are correctly set in your shell profile (e.g., .bashrc, .zshrc)."
echo "You might need to start a new terminal session or source your profile for all changes to take effect."
echo "For Zsh, ensure Oh My Zsh plugins are correctly listed in ~/.zshrc."
echo "For Docker, a logout/login might be required."
echo "---------------------------------------------------------------------"
